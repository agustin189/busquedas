from collections import deque

# Número de nodos preconfigurados por defecto
nodos_default = 6

# Generar el grafo según el número de nodos
def generar_grafo(n):
    grafo = {}

    # Nodo 'B' tiene como vecinos a B1 y B2
    grafo['B'] = ['B1', 'B2']

    for i in range(1, n + 1):
        vecinos = []
        if i % 2 == 1:  # Nodos "impares"
            if i == 1:
                vecinos.append('B')  # B1 es vecino de B
            else:
                vecinos.append(f'B{i-2}')  # Vecino anterior Bn-2 (si existe)
            if i + 2 <= n:
                vecinos.append(f'B{i+2}')  # Vecino siguiente Bn+2 (si existe)
            grafo[f'B{i}'] = vecinos

        elif i % 2 == 0:  # Nodos "pares"
            if i == 2:
                vecinos.append('B')  # B2 es vecino de B
            if i - 2 >= 1:  # Salvedad por nombre de los nodos
                vecinos.append(f'B{i-2}')  # Vecino anterior Bn-2 si existe
            if i + 2 <= n:  # Si no es el último nodo
                vecinos.append(f'B{i+2}')
            grafo[f'B{i}'] = vecinos

    # Muestra el grafo
    print("Grafo generado:")
    for nodo, vecinos in grafo.items():
        print(f"{nodo}: {vecinos}")
    
    return grafo

# Utilizar cantidad de nodos default o ingresar
nodos_input = input(f"\nSe realizará una búsqueda exhaustiva en un árbol con {nodos_default} nodos. ENTER para aceptar o ingrese nuevo valor entero y luego ENTER: ")
if nodos_input == '':
    n = nodos_default  # Por defecto
else:
    n = int(nodos_input)

# Muestra la cantidad de nodos a recorrer
print(f"\nEl árbol tiene {repr(n)} nodos")

# Generar el grafo dinámico
grafo = generar_grafo(n)

# Primero en anchura
def anchura(grafo, inicio):
    cola = deque([[inicio]])  # Cola para almacenar caminos
    visitados = set()  # Para evitar ciclos

    while cola:
        camino = cola.popleft()
        nodo = camino[-1]  # Último nodo en el camino actual

        if nodo in visitados:
            continue

        visitados.add(nodo)

        for vecino in grafo[nodo]:
            nuevo_camino = list(camino)
            nuevo_camino.append(vecino)
            cola.append(nuevo_camino)
            
            if vecino == f'B{(n if n % 2 == 1 else n-1)}':
                return nuevo_camino  # Camino si se encuentra el nodo final

    return None  # Si no se encuentra

# Definición del nodo inicial, de acuerdo a situación problemática
inicio = 'B'

# Búsqueda primero en anchura
camino_encontrado = anchura(grafo, inicio)

# Ajustes para mostrar camino y muestra el nodo objetivo
if camino_encontrado:
    nodo_final = camino_encontrado[-1]  # Último nodo será Bn o Bn-1
    # Mostrar el camino encontrado
    print("\nCamino encontrado:", " -> ".join(camino_encontrado))
    print(f"{nodo_final} es el nodo objetivo (A)\n")
else:
    print("No se encontró un camino al objetivo")

